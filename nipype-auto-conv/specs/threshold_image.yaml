# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.ants.utils.ThresholdImage' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Apply thresholds on images.
# 
#     Examples
#     --------
#     >>> thres = ThresholdImage(dimension=3)
#     >>> thres.inputs.input_image = 'structural.nii'
#     >>> thres.inputs.output_image = 'output.nii.gz'
#     >>> thres.inputs.th_low = 0.5
#     >>> thres.inputs.th_high = 1.0
#     >>> thres.inputs.inside_value = 1.0
#     >>> thres.inputs.outside_value = 0.0
#     >>> thres.cmdline  #doctest: +ELLIPSIS
#     'ThresholdImage 3 structural.nii output.nii.gz 0.500000 1.000000 1.000000 0.000000'
# 
#     >>> thres = ThresholdImage(dimension=3)
#     >>> thres.inputs.input_image = 'structural.nii'
#     >>> thres.inputs.output_image = 'output.nii.gz'
#     >>> thres.inputs.mode = 'Kmeans'
#     >>> thres.inputs.num_thresholds = 4
#     >>> thres.cmdline  #doctest: +ELLIPSIS
#     'ThresholdImage 3 structural.nii output.nii.gz Kmeans 4'
# 
#     
task_name: ThresholdImage
nipype_name: ThresholdImage
nipype_module: nipype.interfaces.ants.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_image: medimage/nifti1
    # type=file|default=<undefined>: input image file
    input_mask: generic/file
    # type=file|default=<undefined>: input mask for Otsu, Kmeans
    output_image: Path
    # type=file: resampled file
    # type=file|default=<undefined>: output image file
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_image: medimage/nifti-gz
    # type=file: resampled file
    # type=file|default=<undefined>: output image file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension:
    # type=int|default=3: dimension of output image
    input_image:
    # type=file|default=<undefined>: input image file
    output_image:
    # type=file: resampled file
    # type=file|default=<undefined>: output image file
    mode:
    # type=enum|default='Otsu'|allowed['Kmeans','Otsu']: whether to run Otsu / Kmeans thresholding
    num_thresholds:
    # type=int|default=0: number of thresholds
    input_mask:
    # type=file|default=<undefined>: input mask for Otsu, Kmeans
    th_low:
    # type=float|default=0.0: lower threshold
    th_high:
    # type=float|default=0.0: upper threshold
    inside_value:
    # type=float|default=1: inside value
    outside_value:
    # type=float|default=0: outside value
    copy_header:
    # type=bool|default=True: copy headers of the original image into the output (corrected) file
    num_threads:
    # type=int|default=1: Number of ITK threads to use
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_image:
    # type=file|default=<undefined>: input image file
    output_image: '"output.nii.gz"'
    # type=file: resampled file
    # type=file|default=<undefined>: output image file
    th_low: '0.5'
    # type=float|default=0.0: lower threshold
    th_high: '1.0'
    # type=float|default=0.0: upper threshold
    inside_value: '1.0'
    # type=float|default=1: inside value
    outside_value: '0.0'
    # type=float|default=0: outside value
    dimension: '3'
    # type=int|default=3: dimension of output image
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_image:
    # type=file|default=<undefined>: input image file
    output_image: '"output.nii.gz"'
    # type=file: resampled file
    # type=file|default=<undefined>: output image file
    mode: '"Kmeans"'
    # type=enum|default='Otsu'|allowed['Kmeans','Otsu']: whether to run Otsu / Kmeans thresholding
    num_thresholds: '4'
    # type=int|default=0: number of thresholds
    dimension: '3'
    # type=int|default=3: dimension of output image
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline:
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    input_image:
    # type=file|default=<undefined>: input image file
    output_image: '"output.nii.gz"'
    # type=file: resampled file
    # type=file|default=<undefined>: output image file
    th_low: '0.5'
    # type=float|default=0.0: lower threshold
    th_high: '1.0'
    # type=float|default=0.0: upper threshold
    inside_value: '1.0'
    # type=float|default=1: inside value
    outside_value: '0.0'
    # type=float|default=0: outside value
    dimension: '3'
    # type=int|default=3: dimension of output image
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline:
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    input_image:
    # type=file|default=<undefined>: input image file
    output_image: '"output.nii.gz"'
    # type=file: resampled file
    # type=file|default=<undefined>: output image file
    mode: '"Kmeans"'
    # type=enum|default='Otsu'|allowed['Kmeans','Otsu']: whether to run Otsu / Kmeans thresholding
    num_thresholds: '4'
    # type=int|default=0: number of thresholds
    dimension: '3'
    # type=int|default=3: dimension of output image
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
