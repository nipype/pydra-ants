# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.ants.registration.RegistrationSynQuick' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Registration using a symmetric image normalization method (SyN).
#     You can read more in Avants et al.; Med Image Anal., 2008
#     (https://www.ncbi.nlm.nih.gov/pubmed/17659998).
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.ants import RegistrationSynQuick
#     >>> reg = RegistrationSynQuick()
#     >>> reg.inputs.fixed_image = 'fixed1.nii'
#     >>> reg.inputs.moving_image = 'moving1.nii'
#     >>> reg.inputs.num_threads = 2
#     >>> reg.cmdline
#     'antsRegistrationSyNQuick.sh -d 3 -f fixed1.nii -r 32 -m moving1.nii -n 2 -o transform -p d -s 26 -t s'
#     >>> reg.run()  # doctest: +SKIP
# 
#     example for multiple images
# 
#     >>> from nipype.interfaces.ants import RegistrationSynQuick
#     >>> reg = RegistrationSynQuick()
#     >>> reg.inputs.fixed_image = ['fixed1.nii', 'fixed2.nii']
#     >>> reg.inputs.moving_image = ['moving1.nii', 'moving2.nii']
#     >>> reg.inputs.num_threads = 2
#     >>> reg.cmdline
#     'antsRegistrationSyNQuick.sh -d 3 -f fixed1.nii -f fixed2.nii -r 32 -m moving1.nii -m moving2.nii -n 2 -o transform -p d -s 26 -t s'
#     >>> reg.run()  # doctest: +SKIP
#     
task_name: RegistrationSynQuick
nipype_name: RegistrationSynQuick
nipype_module: nipype.interfaces.ants.registration
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    fixed_image: medimage/nifti1+list-of
    # type=inputmultiobject|default=[]: Fixed image or source image or reference image
    moving_image: medimage/nifti1+list-of
    # type=inputmultiobject|default=[]: Moving image or target image
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    forward_warp_field: generic/file
    # type=file: Forward warp field
    inverse_warp_field: generic/file
    # type=file: Inverse warp field
    inverse_warped_image: generic/file
    # type=file: Inverse warped image
    out_matrix: generic/file
    # type=file: Affine matrix
    warped_image: generic/file
    # type=file: Warped image
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension:
    # type=enum|default=3|allowed[2,3]: image dimension (2 or 3)
    fixed_image:
    # type=inputmultiobject|default=[]: Fixed image or source image or reference image
    moving_image:
    # type=inputmultiobject|default=[]: Moving image or target image
    output_prefix:
    # type=str|default='transform': A prefix that is prepended to all output files
    num_threads:
    # type=int|default=1: Number of threads (default = 1)
    transform_type:
    # type=enum|default='s'|allowed['a','b','br','r','s','sr','t']: Transform type    * t:  translation   * r:  rigid   * a:  rigid + affine   * s:  rigid + affine + deformable syn (default)   * sr: rigid + deformable syn   * b:  rigid + affine + deformable b-spline syn   * br: rigid + deformable b-spline syn  
    use_histogram_matching:
    # type=bool|default=False: use histogram matching
    histogram_bins:
    # type=int|default=32: histogram bins for mutual information in SyN stage                                  (default = 32)
    spline_distance:
    # type=int|default=26: spline distance for deformable B-spline SyN transform                                  (default = 26)
    precision_type:
    # type=enum|default='double'|allowed['double','float']: precision type (default = double)
    random_seed:
    # type=int|default=0: fixed random seed
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    fixed_image:
    # type=inputmultiobject|default=[]: Fixed image or source image or reference image
    moving_image:
    # type=inputmultiobject|default=[]: Moving image or target image
    num_threads: '2'
    # type=int|default=1: Number of threads (default = 1)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    fixed_image:
    # type=inputmultiobject|default=[]: Fixed image or source image or reference image
    moving_image:
    # type=inputmultiobject|default=[]: Moving image or target image
    num_threads: '2'
    # type=int|default=1: Number of threads (default = 1)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: antsRegistrationSyNQuick.sh -d 3 -f fixed1.nii -r 32 -m moving1.nii -n 2 -o transform -p d -s 26 -t s
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    fixed_image:
    # type=inputmultiobject|default=[]: Fixed image or source image or reference image
    moving_image:
    # type=inputmultiobject|default=[]: Moving image or target image
    num_threads: '2'
    # type=int|default=1: Number of threads (default = 1)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: antsRegistrationSyNQuick.sh -d 3 -f fixed1.nii -f fixed2.nii -r 32 -m moving1.nii -m moving2.nii -n 2 -o transform -p d -s 26 -t s
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    fixed_image:
    # type=inputmultiobject|default=[]: Fixed image or source image or reference image
    moving_image:
    # type=inputmultiobject|default=[]: Moving image or target image
    num_threads: '2'
    # type=int|default=1: Number of threads (default = 1)
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
