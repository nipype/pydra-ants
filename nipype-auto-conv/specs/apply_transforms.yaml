# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.ants.resampling.ApplyTransforms' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# ApplyTransforms, applied to an input image, transforms it according to a
#     reference image and a transform (or a set of transforms).
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.ants import ApplyTransforms
#     >>> at = ApplyTransforms()
#     >>> at.inputs.input_image = 'moving1.nii'
#     >>> at.inputs.reference_image = 'fixed1.nii'
#     >>> at.inputs.transforms = 'identity'
#     >>> at.cmdline
#     'antsApplyTransforms --default-value 0 --float 0 --input moving1.nii --interpolation Linear --output moving1_trans.nii --reference-image fixed1.nii --transform identity'
# 
#     >>> at = ApplyTransforms()
#     >>> at.inputs.dimension = 3
#     >>> at.inputs.input_image = 'moving1.nii'
#     >>> at.inputs.reference_image = 'fixed1.nii'
#     >>> at.inputs.output_image = 'deformed_moving1.nii'
#     >>> at.inputs.interpolation = 'Linear'
#     >>> at.inputs.default_value = 0
#     >>> at.inputs.transforms = ['ants_Warp.nii.gz', 'trans.mat']
#     >>> at.inputs.invert_transform_flags = [False, True]
#     >>> at.cmdline
#     'antsApplyTransforms --default-value 0 --dimensionality 3 --float 0 --input moving1.nii --interpolation Linear --output deformed_moving1.nii --reference-image fixed1.nii --transform ants_Warp.nii.gz --transform [ trans.mat, 1 ]'
# 
#     >>> at1 = ApplyTransforms()
#     >>> at1.inputs.dimension = 3
#     >>> at1.inputs.input_image = 'moving1.nii'
#     >>> at1.inputs.reference_image = 'fixed1.nii'
#     >>> at1.inputs.output_image = 'deformed_moving1.nii'
#     >>> at1.inputs.interpolation = 'BSpline'
#     >>> at1.inputs.interpolation_parameters = (5,)
#     >>> at1.inputs.default_value = 0
#     >>> at1.inputs.transforms = ['ants_Warp.nii.gz', 'trans.mat']
#     >>> at1.inputs.invert_transform_flags = [False, False]
#     >>> at1.cmdline
#     'antsApplyTransforms --default-value 0 --dimensionality 3 --float 0 --input moving1.nii --interpolation BSpline[ 5 ] --output deformed_moving1.nii --reference-image fixed1.nii --transform ants_Warp.nii.gz --transform trans.mat'
# 
#     Identity transforms may be used as part of a chain:
# 
#     >>> at2 = ApplyTransforms()
#     >>> at2.inputs.dimension = 3
#     >>> at2.inputs.input_image = 'moving1.nii'
#     >>> at2.inputs.reference_image = 'fixed1.nii'
#     >>> at2.inputs.output_image = 'deformed_moving1.nii'
#     >>> at2.inputs.interpolation = 'BSpline'
#     >>> at2.inputs.interpolation_parameters = (5,)
#     >>> at2.inputs.default_value = 0
#     >>> at2.inputs.transforms = ['identity', 'ants_Warp.nii.gz', 'trans.mat']
#     >>> at2.cmdline
#     'antsApplyTransforms --default-value 0 --dimensionality 3 --float 0 --input moving1.nii --interpolation BSpline[ 5 ] --output deformed_moving1.nii --reference-image fixed1.nii --transform identity --transform ants_Warp.nii.gz --transform trans.mat'
#     
task_name: ApplyTransforms
nipype_name: ApplyTransforms
nipype_module: nipype.interfaces.ants.resampling
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_image: medimage/nifti1
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image: medimage/nifti1
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_image: medimage/nifti1
    # type=file: Warped image
    # type=str|default='': output file name
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
    output_image: '"deformed_moving1.nii"'
    # type=file: Warped image
    # type=str|default='': output file name
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension:
    # type=enum|default=2|allowed[2,3,4]: This option forces the image to be treated as a specified-dimensional image. If not specified, antsWarp tries to infer the dimensionality from the input image.
    input_image_type:
    # type=enum|default=0|allowed[0,1,2,3]: Option specifying the input image type of scalar (default), vector, tensor, or time series.
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    output_image:
    # type=file: Warped image
    # type=str|default='': output file name
    out_postfix:
    # type=str|default='_trans': Postfix that is appended to all output files (default = _trans)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    interpolation:
    # type=enum|default='Linear'|allowed['BSpline','CosineWindowedSinc','Gaussian','HammingWindowedSinc','LanczosWindowedSinc','Linear','MultiLabel','NearestNeighbor','WelchWindowedSinc']: 
    interpolation_parameters:
    # type=traitcompound|default=None: 
    transforms:
    # type=inputmultiobject|default=[]: transform files: will be applied in reverse order. For example, the last specified transform will be applied first.
    invert_transform_flags:
    # type=inputmultiobject|default=[]: 
    default_value:
    # type=float|default=0.0: 
    print_out_composite_warp_file:
    # type=bool|default=False: output a composite warp file instead of a transformed image
    float:
    # type=bool|default=False: Use float instead of double for computations.
    num_threads:
    # type=int|default=1: Number of ITK threads to use
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    transforms: '"identity"'
    # type=inputmultiobject|default=[]: transform files: will be applied in reverse order. For example, the last specified transform will be applied first.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension: '3'
    # type=enum|default=2|allowed[2,3,4]: This option forces the image to be treated as a specified-dimensional image. If not specified, antsWarp tries to infer the dimensionality from the input image.
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    output_image: '"deformed_moving1.nii"'
    # type=file: Warped image
    # type=str|default='': output file name
    interpolation: '"Linear"'
    # type=enum|default='Linear'|allowed['BSpline','CosineWindowedSinc','Gaussian','HammingWindowedSinc','LanczosWindowedSinc','Linear','MultiLabel','NearestNeighbor','WelchWindowedSinc']: 
    default_value: '0'
    # type=float|default=0.0: 
    transforms: '["ants_Warp.nii.gz", "trans.mat"]'
    # type=inputmultiobject|default=[]: transform files: will be applied in reverse order. For example, the last specified transform will be applied first.
    invert_transform_flags: '[False, True]'
    # type=inputmultiobject|default=[]: 
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension: '3'
    # type=enum|default=2|allowed[2,3,4]: This option forces the image to be treated as a specified-dimensional image. If not specified, antsWarp tries to infer the dimensionality from the input image.
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    output_image: '"deformed_moving1.nii"'
    # type=file: Warped image
    # type=str|default='': output file name
    interpolation: '"BSpline"'
    # type=enum|default='Linear'|allowed['BSpline','CosineWindowedSinc','Gaussian','HammingWindowedSinc','LanczosWindowedSinc','Linear','MultiLabel','NearestNeighbor','WelchWindowedSinc']: 
    interpolation_parameters: (5,)
    # type=traitcompound|default=None: 
    default_value: '0'
    # type=float|default=0.0: 
    transforms: '["ants_Warp.nii.gz", "trans.mat"]'
    # type=inputmultiobject|default=[]: transform files: will be applied in reverse order. For example, the last specified transform will be applied first.
    invert_transform_flags: '[False, False]'
    # type=inputmultiobject|default=[]: 
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension: '3'
    # type=enum|default=2|allowed[2,3,4]: This option forces the image to be treated as a specified-dimensional image. If not specified, antsWarp tries to infer the dimensionality from the input image.
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    output_image: '"deformed_moving1.nii"'
    # type=file: Warped image
    # type=str|default='': output file name
    interpolation: '"BSpline"'
    # type=enum|default='Linear'|allowed['BSpline','CosineWindowedSinc','Gaussian','HammingWindowedSinc','LanczosWindowedSinc','Linear','MultiLabel','NearestNeighbor','WelchWindowedSinc']: 
    interpolation_parameters: (5,)
    # type=traitcompound|default=None: 
    default_value: '0'
    # type=float|default=0.0: 
    transforms: '["identity", "ants_Warp.nii.gz", "trans.mat"]'
    # type=inputmultiobject|default=[]: transform files: will be applied in reverse order. For example, the last specified transform will be applied first.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: antsApplyTransforms --default-value 0 --float 0 --input moving1.nii --interpolation Linear --output moving1_trans.nii --reference-image fixed1.nii --transform identity
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    transforms: '"identity"'
    # type=inputmultiobject|default=[]: transform files: will be applied in reverse order. For example, the last specified transform will be applied first.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: antsApplyTransforms --default-value 0 --dimensionality 3 --float 0 --input moving1.nii --interpolation Linear --output deformed_moving1.nii --reference-image fixed1.nii --transform ants_Warp.nii.gz --transform [ trans.mat, 1 ]
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    dimension: '3'
    # type=enum|default=2|allowed[2,3,4]: This option forces the image to be treated as a specified-dimensional image. If not specified, antsWarp tries to infer the dimensionality from the input image.
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    output_image: '"deformed_moving1.nii"'
    # type=file: Warped image
    # type=str|default='': output file name
    interpolation: '"Linear"'
    # type=enum|default='Linear'|allowed['BSpline','CosineWindowedSinc','Gaussian','HammingWindowedSinc','LanczosWindowedSinc','Linear','MultiLabel','NearestNeighbor','WelchWindowedSinc']: 
    default_value: '0'
    # type=float|default=0.0: 
    transforms: '["ants_Warp.nii.gz", "trans.mat"]'
    # type=inputmultiobject|default=[]: transform files: will be applied in reverse order. For example, the last specified transform will be applied first.
    invert_transform_flags: '[False, True]'
    # type=inputmultiobject|default=[]: 
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: antsApplyTransforms --default-value 0 --dimensionality 3 --float 0 --input moving1.nii --interpolation BSpline[ 5 ] --output deformed_moving1.nii --reference-image fixed1.nii --transform ants_Warp.nii.gz --transform trans.mat
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    dimension: '3'
    # type=enum|default=2|allowed[2,3,4]: This option forces the image to be treated as a specified-dimensional image. If not specified, antsWarp tries to infer the dimensionality from the input image.
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    output_image: '"deformed_moving1.nii"'
    # type=file: Warped image
    # type=str|default='': output file name
    interpolation: '"BSpline"'
    # type=enum|default='Linear'|allowed['BSpline','CosineWindowedSinc','Gaussian','HammingWindowedSinc','LanczosWindowedSinc','Linear','MultiLabel','NearestNeighbor','WelchWindowedSinc']: 
    interpolation_parameters: (5,)
    # type=traitcompound|default=None: 
    default_value: '0'
    # type=float|default=0.0: 
    transforms: '["ants_Warp.nii.gz", "trans.mat"]'
    # type=inputmultiobject|default=[]: transform files: will be applied in reverse order. For example, the last specified transform will be applied first.
    invert_transform_flags: '[False, False]'
    # type=inputmultiobject|default=[]: 
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: antsApplyTransforms --default-value 0 --dimensionality 3 --float 0 --input moving1.nii --interpolation BSpline[ 5 ] --output deformed_moving1.nii --reference-image fixed1.nii --transform identity --transform ants_Warp.nii.gz --transform trans.mat
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    dimension: '3'
    # type=enum|default=2|allowed[2,3,4]: This option forces the image to be treated as a specified-dimensional image. If not specified, antsWarp tries to infer the dimensionality from the input image.
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    output_image: '"deformed_moving1.nii"'
    # type=file: Warped image
    # type=str|default='': output file name
    interpolation: '"BSpline"'
    # type=enum|default='Linear'|allowed['BSpline','CosineWindowedSinc','Gaussian','HammingWindowedSinc','LanczosWindowedSinc','Linear','MultiLabel','NearestNeighbor','WelchWindowedSinc']: 
    interpolation_parameters: (5,)
    # type=traitcompound|default=None: 
    default_value: '0'
    # type=float|default=0.0: 
    transforms: '["identity", "ants_Warp.nii.gz", "trans.mat"]'
    # type=inputmultiobject|default=[]: transform files: will be applied in reverse order. For example, the last specified transform will be applied first.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
