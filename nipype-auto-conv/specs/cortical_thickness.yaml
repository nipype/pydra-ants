# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.ants.segmentation.CorticalThickness' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.ants.segmentation import CorticalThickness
#     >>> corticalthickness = CorticalThickness()
#     >>> corticalthickness.inputs.dimension = 3
#     >>> corticalthickness.inputs.anatomical_image ='T1.nii.gz'
#     >>> corticalthickness.inputs.brain_template = 'study_template.nii.gz'
#     >>> corticalthickness.inputs.brain_probability_mask ='ProbabilityMaskOfStudyTemplate.nii.gz'
#     >>> corticalthickness.inputs.segmentation_priors = ['BrainSegmentationPrior01.nii.gz',
#     ...                                                 'BrainSegmentationPrior02.nii.gz',
#     ...                                                 'BrainSegmentationPrior03.nii.gz',
#     ...                                                 'BrainSegmentationPrior04.nii.gz']
#     >>> corticalthickness.inputs.t1_registration_template = 'brain_study_template.nii.gz'
#     >>> corticalthickness.cmdline
#     'antsCorticalThickness.sh -a T1.nii.gz -m ProbabilityMaskOfStudyTemplate.nii.gz
#     -e study_template.nii.gz -d 3 -s nii.gz -o antsCT_
#     -p nipype_priors/BrainSegmentationPrior%02d.nii.gz -t brain_study_template.nii.gz'
# 
#     
task_name: CorticalThickness
nipype_name: CorticalThickness
nipype_module: nipype.interfaces.ants.segmentation
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    anatomical_image: medimage/nifti-gz
    # type=file|default=<undefined>: Structural *intensity* image, typically T1. If more than one anatomical image is specified, subsequently specified images are used during the segmentation process. However, only the first image is used in the registration of priors. Our suggestion would be to specify the T1 as the first image.
    brain_probability_mask: medimage/nifti-gz
    # type=file|default=<undefined>: brain probability mask in template space
    brain_template: medimage/nifti-gz
    # type=file|default=<undefined>: Anatomical *intensity* template (possibly created using a population data set with buildtemplateparallel.sh in ANTs). This template is  *not* skull-stripped.
    cortical_label_image: generic/file
    # type=file|default=<undefined>: Cortical ROI labels to use as a prior for ATITH.
    extraction_registration_mask: generic/file
    # type=file|default=<undefined>: Mask (defined in the template space) used during registration for brain extraction.
    segmentation_priors: medimage/nifti-gz+list-of
    # type=inputmultiobject|default=[]: 
    t1_registration_template: medimage/nifti-gz
    # type=file|default=<undefined>: Anatomical *intensity* template (assumed to be skull-stripped). A common case would be where this would be the same template as specified in the -e option which is not skull stripped.
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    BrainExtractionMask: generic/file
    # type=file: brain extraction mask
    BrainSegmentation: generic/file
    # type=file: brain segmentation image
    BrainSegmentationN4: generic/file
    # type=file: N4 corrected image
    BrainSegmentationPosteriors: generic/file+list-of
    # type=outputmultiobject: Posterior probability images
    BrainVolumes: generic/file
    # type=file: Brain volumes as text
    CorticalThickness: generic/file
    # type=file: cortical thickness file
    CorticalThicknessNormedToTemplate: generic/file
    # type=file: Normalized cortical thickness
    ExtractedBrainN4: generic/file
    # type=file: extracted brain from N4 image
    SubjectToTemplate0GenericAffine: generic/file
    # type=file: Template to subject inverse affine
    SubjectToTemplate1Warp: generic/file
    # type=file: Template to subject inverse warp
    SubjectToTemplateLogJacobian: generic/file
    # type=file: Template to subject log jacobian
    TemplateToSubject0Warp: generic/file
    # type=file: Template to subject warp
    TemplateToSubject1GenericAffine: generic/file
    # type=file: Template to subject affine
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension:
    # type=enum|default=3|allowed[2,3]: image dimension (2 or 3)
    anatomical_image:
    # type=file|default=<undefined>: Structural *intensity* image, typically T1. If more than one anatomical image is specified, subsequently specified images are used during the segmentation process. However, only the first image is used in the registration of priors. Our suggestion would be to specify the T1 as the first image.
    brain_template:
    # type=file|default=<undefined>: Anatomical *intensity* template (possibly created using a population data set with buildtemplateparallel.sh in ANTs). This template is  *not* skull-stripped.
    brain_probability_mask:
    # type=file|default=<undefined>: brain probability mask in template space
    segmentation_priors:
    # type=inputmultiobject|default=[]: 
    out_prefix:
    # type=str|default='antsCT_': Prefix that is prepended to all output files
    image_suffix:
    # type=str|default='nii.gz': any of standard ITK formats, nii.gz is default
    t1_registration_template:
    # type=file|default=<undefined>: Anatomical *intensity* template (assumed to be skull-stripped). A common case would be where this would be the same template as specified in the -e option which is not skull stripped.
    extraction_registration_mask:
    # type=file|default=<undefined>: Mask (defined in the template space) used during registration for brain extraction.
    keep_temporary_files:
    # type=int|default=0: Keep brain extraction/segmentation warps, etc (default = 0).
    max_iterations:
    # type=int|default=0: ANTS registration max iterations (default = 100x100x70x20)
    prior_segmentation_weight:
    # type=float|default=0.0: Atropos spatial prior *probability* weight for the segmentation
    segmentation_iterations:
    # type=int|default=0: N4 -> Atropos -> N4 iterations during segmentation (default = 3)
    posterior_formulation:
    # type=str|default='': Atropos posterior formulation and whether or not to use mixture model proportions. e.g 'Socrates[1]' (default) or 'Aristotle[1]'. Choose the latter if you want use the distance priors (see also the -l option for label propagation control).
    use_floatingpoint_precision:
    # type=enum|default=0|allowed[0,1]: Use floating point precision in registrations (default = 0)
    use_random_seeding:
    # type=enum|default=0|allowed[0,1]: Use random number generated from system clock in Atropos (default = 1)
    b_spline_smoothing:
    # type=bool|default=False: Use B-spline SyN for registrations and B-spline exponential mapping in DiReCT.
    cortical_label_image:
    # type=file|default=<undefined>: Cortical ROI labels to use as a prior for ATITH.
    label_propagation:
    # type=str|default='': Incorporate a distance prior one the posterior formulation.  Should be of the form 'label[lambda,boundaryProbability]' where label is a value of 1,2,3,... denoting label ID.  The label probability for anything outside the current label = boundaryProbability * exp( -lambda * distanceFromBoundary ) Intuitively, smaller lambda values will increase the spatial capture range of the distance prior.  To apply to all label values, simply omit specifying the label, i.e. -l [lambda,boundaryProbability].
    quick_registration:
    # type=bool|default=False: If = 1, use antsRegistrationSyNQuick.sh as the basis for registration during brain extraction, brain segmentation, and (optional) normalization to a template. Otherwise use antsRegistrationSyN.sh (default = 0).
    debug:
    # type=bool|default=False: If > 0, runs a faster version of the script. Only for testing. Implies -u 0. Requires single thread computation for complete reproducibility.
    num_threads:
    # type=int|default=1: Number of ITK threads to use
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension: '3'
    # type=enum|default=3|allowed[2,3]: image dimension (2 or 3)
    anatomical_image:
    # type=file|default=<undefined>: Structural *intensity* image, typically T1. If more than one anatomical image is specified, subsequently specified images are used during the segmentation process. However, only the first image is used in the registration of priors. Our suggestion would be to specify the T1 as the first image.
    brain_template:
    # type=file|default=<undefined>: Anatomical *intensity* template (possibly created using a population data set with buildtemplateparallel.sh in ANTs). This template is  *not* skull-stripped.
    brain_probability_mask:
    # type=file|default=<undefined>: brain probability mask in template space
    segmentation_priors:
    # type=inputmultiobject|default=[]: 
    t1_registration_template:
    # type=file|default=<undefined>: Anatomical *intensity* template (assumed to be skull-stripped). A common case would be where this would be the same template as specified in the -e option which is not skull stripped.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: antsCorticalThickness.sh -a T1.nii.gz -m ProbabilityMaskOfStudyTemplate.nii.gz -e study_template.nii.gz -d 3 -s nii.gz -o antsCT_ -p nipype_priors/BrainSegmentationPrior%02d.nii.gz -t brain_study_template.nii.gz
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    dimension: '3'
    # type=enum|default=3|allowed[2,3]: image dimension (2 or 3)
    anatomical_image:
    # type=file|default=<undefined>: Structural *intensity* image, typically T1. If more than one anatomical image is specified, subsequently specified images are used during the segmentation process. However, only the first image is used in the registration of priors. Our suggestion would be to specify the T1 as the first image.
    brain_template:
    # type=file|default=<undefined>: Anatomical *intensity* template (possibly created using a population data set with buildtemplateparallel.sh in ANTs). This template is  *not* skull-stripped.
    brain_probability_mask:
    # type=file|default=<undefined>: brain probability mask in template space
    segmentation_priors:
    # type=inputmultiobject|default=[]: 
    t1_registration_template:
    # type=file|default=<undefined>: Anatomical *intensity* template (assumed to be skull-stripped). A common case would be where this would be the same template as specified in the -e option which is not skull stripped.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
