# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.ants.segmentation.Atropos' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     A multivariate n-class segmentation algorithm.
# 
#     A finite mixture modeling (FMM) segmentation approach with possibilities for
#     specifying prior constraints. These prior constraints include the specification
#     of a prior label image, prior probability images (one for each class), and/or an
#     MRF prior to enforce spatial smoothing of the labels. Similar algorithms include
#     FAST and SPM.
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.ants import Atropos
#     >>> at = Atropos(
#     ...     dimension=3, intensity_images='structural.nii', mask_image='mask.nii',
#     ...     number_of_tissue_classes=2, likelihood_model='Gaussian', save_posteriors=True,
#     ...     mrf_smoothing_factor=0.2, mrf_radius=[1, 1, 1], icm_use_synchronous_update=True,
#     ...     maximum_number_of_icm_terations=1, n_iterations=5, convergence_threshold=0.000001,
#     ...     posterior_formulation='Socrates', use_mixture_model_proportions=True)
#     >>> at.inputs.initialization = 'Random'
#     >>> at.cmdline
#     'Atropos --image-dimensionality 3 --icm [1,1]
#     --initialization Random[2] --intensity-image structural.nii
#     --likelihood-model Gaussian --mask-image mask.nii --mrf [0.2,1x1x1] --convergence [5,1e-06]
#     --output [structural_labeled.nii,POSTERIOR_%02d.nii.gz] --posterior-formulation Socrates[1]
#     --use-random-seed 1'
# 
#     >>> at = Atropos(
#     ...     dimension=3, intensity_images='structural.nii', mask_image='mask.nii',
#     ...     number_of_tissue_classes=2, likelihood_model='Gaussian', save_posteriors=True,
#     ...     mrf_smoothing_factor=0.2, mrf_radius=[1, 1, 1], icm_use_synchronous_update=True,
#     ...     maximum_number_of_icm_terations=1, n_iterations=5, convergence_threshold=0.000001,
#     ...     posterior_formulation='Socrates', use_mixture_model_proportions=True)
#     >>> at.inputs.initialization = 'KMeans'
#     >>> at.inputs.kmeans_init_centers = [100, 200]
#     >>> at.cmdline
#     'Atropos --image-dimensionality 3 --icm [1,1]
#     --initialization KMeans[2,100,200] --intensity-image structural.nii
#     --likelihood-model Gaussian --mask-image mask.nii --mrf [0.2,1x1x1] --convergence [5,1e-06]
#     --output [structural_labeled.nii,POSTERIOR_%02d.nii.gz] --posterior-formulation Socrates[1]
#     --use-random-seed 1'
# 
#     >>> at = Atropos(
#     ...     dimension=3, intensity_images='structural.nii', mask_image='mask.nii',
#     ...     number_of_tissue_classes=2, likelihood_model='Gaussian', save_posteriors=True,
#     ...     mrf_smoothing_factor=0.2, mrf_radius=[1, 1, 1], icm_use_synchronous_update=True,
#     ...     maximum_number_of_icm_terations=1, n_iterations=5, convergence_threshold=0.000001,
#     ...     posterior_formulation='Socrates', use_mixture_model_proportions=True)
#     >>> at.inputs.initialization = 'PriorProbabilityImages'
#     >>> at.inputs.prior_image = 'BrainSegmentationPrior%02d.nii.gz'
#     >>> at.inputs.prior_weighting = 0.8
#     >>> at.inputs.prior_probability_threshold = 0.0000001
#     >>> at.cmdline
#     'Atropos --image-dimensionality 3 --icm [1,1]
#     --initialization PriorProbabilityImages[2,BrainSegmentationPrior%02d.nii.gz,0.8,1e-07]
#     --intensity-image structural.nii --likelihood-model Gaussian --mask-image mask.nii
#     --mrf [0.2,1x1x1] --convergence [5,1e-06]
#     --output [structural_labeled.nii,POSTERIOR_%02d.nii.gz]
#     --posterior-formulation Socrates[1] --use-random-seed 1'
# 
#     >>> at = Atropos(
#     ...     dimension=3, intensity_images='structural.nii', mask_image='mask.nii',
#     ...     number_of_tissue_classes=2, likelihood_model='Gaussian', save_posteriors=True,
#     ...     mrf_smoothing_factor=0.2, mrf_radius=[1, 1, 1], icm_use_synchronous_update=True,
#     ...     maximum_number_of_icm_terations=1, n_iterations=5, convergence_threshold=0.000001,
#     ...     posterior_formulation='Socrates', use_mixture_model_proportions=True)
#     >>> at.inputs.initialization = 'PriorLabelImage'
#     >>> at.inputs.prior_image = 'segmentation0.nii.gz'
#     >>> at.inputs.number_of_tissue_classes = 2
#     >>> at.inputs.prior_weighting = 0.8
#     >>> at.cmdline
#     'Atropos --image-dimensionality 3 --icm [1,1]
#     --initialization PriorLabelImage[2,segmentation0.nii.gz,0.8] --intensity-image structural.nii
#     --likelihood-model Gaussian --mask-image mask.nii --mrf [0.2,1x1x1] --convergence [5,1e-06]
#     --output [structural_labeled.nii,POSTERIOR_%02d.nii.gz] --posterior-formulation Socrates[1]
#     --use-random-seed 1'
# 
#     
task_name: Atropos
nipype_name: Atropos
nipype_module: nipype.interfaces.ants.segmentation
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    intensity_images: medimage/nifti1+list-of
    # type=inputmultiobject|default=[]: 
    mask_image: medimage/nifti1
    # type=file|default=<undefined>: 
    out_classified_image_name: Path
    # type=file|default=<undefined>: 
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
    out_classified_image_name: out_classified_image_name_default
    # type=file|default=<undefined>: 
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    classified_image: generic/file
    # type=file: 
    posteriors: generic/file+list-of
    # type=outputmultiobject: 
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension:
    # type=enum|default=3|allowed[2,3,4]: image dimension (2, 3, or 4)
    intensity_images:
    # type=inputmultiobject|default=[]: 
    mask_image:
    # type=file|default=<undefined>: 
    initialization:
    # type=enum|default='Random'|allowed['KMeans','Otsu','PriorLabelImage','PriorProbabilityImages','Random']: 
    kmeans_init_centers:
    # type=list|default=[]: 
    prior_image:
    # type=traitcompound|default=None: either a string pattern (e.g., 'prior%02d.nii') or an existing vector-image file.
    number_of_tissue_classes:
    # type=int|default=0: 
    prior_weighting:
    # type=float|default=0.0: 
    prior_probability_threshold:
    # type=float|default=0.0: 
    likelihood_model:
    # type=str|default='': 
    mrf_smoothing_factor:
    # type=float|default=0.0: 
    mrf_radius:
    # type=list|default=[]: 
    icm_use_synchronous_update:
    # type=bool|default=False: 
    maximum_number_of_icm_terations:
    # type=int|default=0: 
    n_iterations:
    # type=int|default=0: 
    convergence_threshold:
    # type=float|default=0.0: 
    posterior_formulation:
    # type=str|default='': 
    use_random_seed:
    # type=bool|default=True: use random seed value over constant
    use_mixture_model_proportions:
    # type=bool|default=False: 
    out_classified_image_name:
    # type=file|default=<undefined>: 
    save_posteriors:
    # type=bool|default=False: 
    output_posteriors_name_template:
    # type=str|default='POSTERIOR_%02d.nii.gz': 
    num_threads:
    # type=int|default=1: Number of ITK threads to use
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    initialization: '"Random"'
    # type=enum|default='Random'|allowed['KMeans','Otsu','PriorLabelImage','PriorProbabilityImages','Random']: 
    dimension: '3'
    # type=enum|default=3|allowed[2,3,4]: image dimension (2, 3, or 4)
    intensity_images:
    # type=inputmultiobject|default=[]: 
    mask_image:
    # type=file|default=<undefined>: 
    number_of_tissue_classes: '2'
    # type=int|default=0: 
    likelihood_model: '"Gaussian"'
    # type=str|default='': 
    save_posteriors: 'True'
    # type=bool|default=False: 
    mrf_smoothing_factor: '0.2'
    # type=float|default=0.0: 
    mrf_radius: '[1, 1, 1]'
    # type=list|default=[]: 
    icm_use_synchronous_update: 'True'
    # type=bool|default=False: 
    maximum_number_of_icm_terations: '1'
    # type=int|default=0: 
    n_iterations: '5'
    # type=int|default=0: 
    convergence_threshold: '0.000001'
    # type=float|default=0.0: 
    posterior_formulation: '"Socrates"'
    # type=str|default='': 
    use_mixture_model_proportions: 'True'
    # type=bool|default=False: 
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    initialization: '"KMeans"'
    # type=enum|default='Random'|allowed['KMeans','Otsu','PriorLabelImage','PriorProbabilityImages','Random']: 
    kmeans_init_centers: '[100, 200]'
    # type=list|default=[]: 
    dimension: '3'
    # type=enum|default=3|allowed[2,3,4]: image dimension (2, 3, or 4)
    intensity_images:
    # type=inputmultiobject|default=[]: 
    mask_image:
    # type=file|default=<undefined>: 
    number_of_tissue_classes: '2'
    # type=int|default=0: 
    likelihood_model: '"Gaussian"'
    # type=str|default='': 
    save_posteriors: 'True'
    # type=bool|default=False: 
    mrf_smoothing_factor: '0.2'
    # type=float|default=0.0: 
    mrf_radius: '[1, 1, 1]'
    # type=list|default=[]: 
    icm_use_synchronous_update: 'True'
    # type=bool|default=False: 
    maximum_number_of_icm_terations: '1'
    # type=int|default=0: 
    n_iterations: '5'
    # type=int|default=0: 
    convergence_threshold: '0.000001'
    # type=float|default=0.0: 
    posterior_formulation: '"Socrates"'
    # type=str|default='': 
    use_mixture_model_proportions: 'True'
    # type=bool|default=False: 
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    initialization: '"PriorProbabilityImages"'
    # type=enum|default='Random'|allowed['KMeans','Otsu','PriorLabelImage','PriorProbabilityImages','Random']: 
    prior_image: '"BrainSegmentationPrior%02d.nii.gz"'
    # type=traitcompound|default=None: either a string pattern (e.g., 'prior%02d.nii') or an existing vector-image file.
    prior_weighting: '0.8'
    # type=float|default=0.0: 
    prior_probability_threshold: '0.0000001'
    # type=float|default=0.0: 
    dimension: '3'
    # type=enum|default=3|allowed[2,3,4]: image dimension (2, 3, or 4)
    intensity_images:
    # type=inputmultiobject|default=[]: 
    mask_image:
    # type=file|default=<undefined>: 
    number_of_tissue_classes: '2'
    # type=int|default=0: 
    likelihood_model: '"Gaussian"'
    # type=str|default='': 
    save_posteriors: 'True'
    # type=bool|default=False: 
    mrf_smoothing_factor: '0.2'
    # type=float|default=0.0: 
    mrf_radius: '[1, 1, 1]'
    # type=list|default=[]: 
    icm_use_synchronous_update: 'True'
    # type=bool|default=False: 
    maximum_number_of_icm_terations: '1'
    # type=int|default=0: 
    n_iterations: '5'
    # type=int|default=0: 
    convergence_threshold: '0.000001'
    # type=float|default=0.0: 
    posterior_formulation: '"Socrates"'
    # type=str|default='': 
    use_mixture_model_proportions: 'True'
    # type=bool|default=False: 
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    initialization: '"PriorLabelImage"'
    # type=enum|default='Random'|allowed['KMeans','Otsu','PriorLabelImage','PriorProbabilityImages','Random']: 
    prior_image: '"segmentation0.nii.gz"'
    # type=traitcompound|default=None: either a string pattern (e.g., 'prior%02d.nii') or an existing vector-image file.
    number_of_tissue_classes: '2'
    # type=int|default=0: 
    prior_weighting: '0.8'
    # type=float|default=0.0: 
    dimension: '3'
    # type=enum|default=3|allowed[2,3,4]: image dimension (2, 3, or 4)
    intensity_images:
    # type=inputmultiobject|default=[]: 
    mask_image:
    # type=file|default=<undefined>: 
    likelihood_model: '"Gaussian"'
    # type=str|default='': 
    save_posteriors: 'True'
    # type=bool|default=False: 
    mrf_smoothing_factor: '0.2'
    # type=float|default=0.0: 
    mrf_radius: '[1, 1, 1]'
    # type=list|default=[]: 
    icm_use_synchronous_update: 'True'
    # type=bool|default=False: 
    maximum_number_of_icm_terations: '1'
    # type=int|default=0: 
    n_iterations: '5'
    # type=int|default=0: 
    convergence_threshold: '0.000001'
    # type=float|default=0.0: 
    posterior_formulation: '"Socrates"'
    # type=str|default='': 
    use_mixture_model_proportions: 'True'
    # type=bool|default=False: 
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: Atropos --image-dimensionality 3 --icm [1,1] --initialization Random[2] --intensity-image structural.nii --likelihood-model Gaussian --mask-image mask.nii --mrf [0.2,1x1x1] --convergence [5,1e-06] --output [structural_labeled.nii,POSTERIOR_%02d.nii.gz] --posterior-formulation Socrates[1] --use-random-seed 1
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    initialization: '"Random"'
    # type=enum|default='Random'|allowed['KMeans','Otsu','PriorLabelImage','PriorProbabilityImages','Random']: 
    dimension: '3'
    # type=enum|default=3|allowed[2,3,4]: image dimension (2, 3, or 4)
    intensity_images:
    # type=inputmultiobject|default=[]: 
    mask_image:
    # type=file|default=<undefined>: 
    number_of_tissue_classes: '2'
    # type=int|default=0: 
    likelihood_model: '"Gaussian"'
    # type=str|default='': 
    save_posteriors: 'True'
    # type=bool|default=False: 
    mrf_smoothing_factor: '0.2'
    # type=float|default=0.0: 
    mrf_radius: '[1, 1, 1]'
    # type=list|default=[]: 
    icm_use_synchronous_update: 'True'
    # type=bool|default=False: 
    maximum_number_of_icm_terations: '1'
    # type=int|default=0: 
    n_iterations: '5'
    # type=int|default=0: 
    convergence_threshold: '0.000001'
    # type=float|default=0.0: 
    posterior_formulation: '"Socrates"'
    # type=str|default='': 
    use_mixture_model_proportions: 'True'
    # type=bool|default=False: 
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: Atropos --image-dimensionality 3 --icm [1,1] --initialization KMeans[2,100,200] --intensity-image structural.nii --likelihood-model Gaussian --mask-image mask.nii --mrf [0.2,1x1x1] --convergence [5,1e-06] --output [structural_labeled.nii,POSTERIOR_%02d.nii.gz] --posterior-formulation Socrates[1] --use-random-seed 1
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    initialization: '"KMeans"'
    # type=enum|default='Random'|allowed['KMeans','Otsu','PriorLabelImage','PriorProbabilityImages','Random']: 
    kmeans_init_centers: '[100, 200]'
    # type=list|default=[]: 
    dimension: '3'
    # type=enum|default=3|allowed[2,3,4]: image dimension (2, 3, or 4)
    intensity_images:
    # type=inputmultiobject|default=[]: 
    mask_image:
    # type=file|default=<undefined>: 
    number_of_tissue_classes: '2'
    # type=int|default=0: 
    likelihood_model: '"Gaussian"'
    # type=str|default='': 
    save_posteriors: 'True'
    # type=bool|default=False: 
    mrf_smoothing_factor: '0.2'
    # type=float|default=0.0: 
    mrf_radius: '[1, 1, 1]'
    # type=list|default=[]: 
    icm_use_synchronous_update: 'True'
    # type=bool|default=False: 
    maximum_number_of_icm_terations: '1'
    # type=int|default=0: 
    n_iterations: '5'
    # type=int|default=0: 
    convergence_threshold: '0.000001'
    # type=float|default=0.0: 
    posterior_formulation: '"Socrates"'
    # type=str|default='': 
    use_mixture_model_proportions: 'True'
    # type=bool|default=False: 
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: Atropos --image-dimensionality 3 --icm [1,1] --initialization PriorProbabilityImages[2,BrainSegmentationPrior%02d.nii.gz,0.8,1e-07] --intensity-image structural.nii --likelihood-model Gaussian --mask-image mask.nii --mrf [0.2,1x1x1] --convergence [5,1e-06] --output [structural_labeled.nii,POSTERIOR_%02d.nii.gz] --posterior-formulation Socrates[1] --use-random-seed 1
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    initialization: '"PriorProbabilityImages"'
    # type=enum|default='Random'|allowed['KMeans','Otsu','PriorLabelImage','PriorProbabilityImages','Random']: 
    prior_image: '"BrainSegmentationPrior%02d.nii.gz"'
    # type=traitcompound|default=None: either a string pattern (e.g., 'prior%02d.nii') or an existing vector-image file.
    prior_weighting: '0.8'
    # type=float|default=0.0: 
    prior_probability_threshold: '0.0000001'
    # type=float|default=0.0: 
    dimension: '3'
    # type=enum|default=3|allowed[2,3,4]: image dimension (2, 3, or 4)
    intensity_images:
    # type=inputmultiobject|default=[]: 
    mask_image:
    # type=file|default=<undefined>: 
    number_of_tissue_classes: '2'
    # type=int|default=0: 
    likelihood_model: '"Gaussian"'
    # type=str|default='': 
    save_posteriors: 'True'
    # type=bool|default=False: 
    mrf_smoothing_factor: '0.2'
    # type=float|default=0.0: 
    mrf_radius: '[1, 1, 1]'
    # type=list|default=[]: 
    icm_use_synchronous_update: 'True'
    # type=bool|default=False: 
    maximum_number_of_icm_terations: '1'
    # type=int|default=0: 
    n_iterations: '5'
    # type=int|default=0: 
    convergence_threshold: '0.000001'
    # type=float|default=0.0: 
    posterior_formulation: '"Socrates"'
    # type=str|default='': 
    use_mixture_model_proportions: 'True'
    # type=bool|default=False: 
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: Atropos --image-dimensionality 3 --icm [1,1] --initialization PriorLabelImage[2,segmentation0.nii.gz,0.8] --intensity-image structural.nii --likelihood-model Gaussian --mask-image mask.nii --mrf [0.2,1x1x1] --convergence [5,1e-06] --output [structural_labeled.nii,POSTERIOR_%02d.nii.gz] --posterior-formulation Socrates[1] --use-random-seed 1
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    initialization: '"PriorLabelImage"'
    # type=enum|default='Random'|allowed['KMeans','Otsu','PriorLabelImage','PriorProbabilityImages','Random']: 
    prior_image: '"segmentation0.nii.gz"'
    # type=traitcompound|default=None: either a string pattern (e.g., 'prior%02d.nii') or an existing vector-image file.
    number_of_tissue_classes: '2'
    # type=int|default=0: 
    prior_weighting: '0.8'
    # type=float|default=0.0: 
    dimension: '3'
    # type=enum|default=3|allowed[2,3,4]: image dimension (2, 3, or 4)
    intensity_images:
    # type=inputmultiobject|default=[]: 
    mask_image:
    # type=file|default=<undefined>: 
    likelihood_model: '"Gaussian"'
    # type=str|default='': 
    save_posteriors: 'True'
    # type=bool|default=False: 
    mrf_smoothing_factor: '0.2'
    # type=float|default=0.0: 
    mrf_radius: '[1, 1, 1]'
    # type=list|default=[]: 
    icm_use_synchronous_update: 'True'
    # type=bool|default=False: 
    maximum_number_of_icm_terations: '1'
    # type=int|default=0: 
    n_iterations: '5'
    # type=int|default=0: 
    convergence_threshold: '0.000001'
    # type=float|default=0.0: 
    posterior_formulation: '"Socrates"'
    # type=str|default='': 
    use_mixture_model_proportions: 'True'
    # type=bool|default=False: 
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
