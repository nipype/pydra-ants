# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.ants.resampling.WarpTimeSeriesImageMultiTransform' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Warps a time-series from one space to another
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.ants import WarpTimeSeriesImageMultiTransform
#     >>> wtsimt = WarpTimeSeriesImageMultiTransform()
#     >>> wtsimt.inputs.input_image = 'resting.nii'
#     >>> wtsimt.inputs.reference_image = 'ants_deformed.nii.gz'
#     >>> wtsimt.inputs.transformation_series = ['ants_Warp.nii.gz','ants_Affine.txt']
#     >>> wtsimt.cmdline
#     'WarpTimeSeriesImageMultiTransform 4 resting.nii resting_wtsimt.nii -R ants_deformed.nii.gz ants_Warp.nii.gz ants_Affine.txt'
# 
#     >>> wtsimt = WarpTimeSeriesImageMultiTransform()
#     >>> wtsimt.inputs.input_image = 'resting.nii'
#     >>> wtsimt.inputs.reference_image = 'ants_deformed.nii.gz'
#     >>> wtsimt.inputs.transformation_series = ['ants_Warp.nii.gz','ants_Affine.txt']
#     >>> wtsimt.inputs.invert_affine = [1] # # this will invert the 1st Affine file: ants_Affine.txt
#     >>> wtsimt.cmdline
#     'WarpTimeSeriesImageMultiTransform 4 resting.nii resting_wtsimt.nii -R ants_deformed.nii.gz ants_Warp.nii.gz -i ants_Affine.txt'
#     
task_name: WarpTimeSeriesImageMultiTransform
nipype_name: WarpTimeSeriesImageMultiTransform
nipype_module: nipype.interfaces.ants.resampling
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_image: medimage/nifti1
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image: medimage/nifti-gz
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    transformation_series: medimage/nifti-gz+list-of
    # type=inputmultiobject|default=[]: transformation file(s) to be applied
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_image: generic/file
    # type=file: Warped image
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension:
    # type=enum|default=4|allowed[3,4]: image dimension (3 or 4)
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    out_postfix:
    # type=str|default='_wtsimt': Postfix that is prepended to all output files (default = _wtsimt)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    tightest_box:
    # type=bool|default=False: computes tightest bounding box (overridden by reference_image if given)
    reslice_by_header:
    # type=bool|default=False: Uses orientation matrix and origin encoded in reference image file header. Not typically used with additional transforms
    use_nearest:
    # type=bool|default=False: Use nearest neighbor interpolation
    use_bspline:
    # type=bool|default=False: Use 3rd order B-Spline interpolation
    transformation_series:
    # type=inputmultiobject|default=[]: transformation file(s) to be applied
    invert_affine:
    # type=list|default=[]: List of Affine transformations to invert.E.g.: [1,4,5] inverts the 1st, 4th, and 5th Affines found in transformation_series. Note that indexing starts with 1 and does not include warp fields. Affine transformations are distinguished from warp fields by the word "affine" included in their filenames.
    num_threads:
    # type=int|default=1: Number of ITK threads to use
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    transformation_series:
    # type=inputmultiobject|default=[]: transformation file(s) to be applied
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    transformation_series:
    # type=inputmultiobject|default=[]: transformation file(s) to be applied
    invert_affine: '[1] # # this will invert the 1st Affine file: ants_Affine.txt'
    # type=list|default=[]: List of Affine transformations to invert.E.g.: [1,4,5] inverts the 1st, 4th, and 5th Affines found in transformation_series. Note that indexing starts with 1 and does not include warp fields. Affine transformations are distinguished from warp fields by the word "affine" included in their filenames.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: WarpTimeSeriesImageMultiTransform 4 resting.nii resting_wtsimt.nii -R ants_deformed.nii.gz ants_Warp.nii.gz ants_Affine.txt
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    transformation_series:
    # type=inputmultiobject|default=[]: transformation file(s) to be applied
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: WarpTimeSeriesImageMultiTransform 4 resting.nii resting_wtsimt.nii -R ants_deformed.nii.gz ants_Warp.nii.gz -i ants_Affine.txt
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    input_image:
    # type=file|default=<undefined>: image to apply transformation to (generally a coregistered functional)
    reference_image:
    # type=file|default=<undefined>: reference image space that you wish to warp INTO
    transformation_series:
    # type=inputmultiobject|default=[]: transformation file(s) to be applied
    invert_affine: '[1] # # this will invert the 1st Affine file: ants_Affine.txt'
    # type=list|default=[]: List of Affine transformations to invert.E.g.: [1,4,5] inverts the 1st, 4th, and 5th Affines found in transformation_series. Note that indexing starts with 1 and does not include warp fields. Affine transformations are distinguished from warp fields by the word "affine" included in their filenames.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
