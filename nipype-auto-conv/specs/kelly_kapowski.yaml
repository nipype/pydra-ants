# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.ants.segmentation.KellyKapowski' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Nipype Interface to ANTs' KellyKapowski, also known as DiReCT.
# 
#     DiReCT is a registration based estimate of cortical thickness. It was published
#     in S. R. Das, B. B. Avants, M. Grossman, and J. C. Gee, Registration based
#     cortical thickness measurement, Neuroimage 2009, 45:867--879.
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.ants.segmentation import KellyKapowski
#     >>> kk = KellyKapowski()
#     >>> kk.inputs.dimension = 3
#     >>> kk.inputs.segmentation_image = "segmentation0.nii.gz"
#     >>> kk.inputs.convergence = "[45,0.0,10]"
#     >>> kk.inputs.thickness_prior_estimate = 10
#     >>> kk.cmdline
#     'KellyKapowski --convergence "[45,0.0,10]"
#     --output "[segmentation0_cortical_thickness.nii.gz,segmentation0_warped_white_matter.nii.gz]"
#     --image-dimensionality 3 --gradient-step 0.025000
#     --maximum-number-of-invert-displacement-field-iterations 20 --number-of-integration-points 10
#     --segmentation-image "[segmentation0.nii.gz,2,3]" --smoothing-variance 1.000000
#     --smoothing-velocity-field-parameter 1.500000 --thickness-prior-estimate 10.000000'
# 
#     
task_name: KellyKapowski
nipype_name: KellyKapowski
nipype_module: nipype.interfaces.ants.segmentation
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    cortical_thickness: Path
    # type=file: A thickness map defined in the segmented gray matter.
    # type=file|default=<undefined>: Filename for the cortical thickness.
    gray_matter_prob_image: generic/file
    # type=file|default=<undefined>: In addition to the segmentation image, a gray matter probability image can be used. If no such image is supplied, one is created using the segmentation image and a variance of 1.0 mm.
    segmentation_image: medimage/nifti-gz
    # type=file|default=<undefined>: A segmentation image must be supplied labeling the gray and white matters. Default values = 2 and 3, respectively.
    thickness_prior_image: generic/file
    # type=file|default=<undefined>: An image containing spatially varying prior thickness values.
    warped_white_matter: Path
    # type=file: A warped white matter image.
    # type=file|default=<undefined>: Filename for the warped white matter file.
    white_matter_prob_image: generic/file
    # type=file|default=<undefined>: In addition to the segmentation image, a white matter probability image can be used. If no such image is supplied, one is created using the segmentation image and a variance of 1.0 mm.
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    cortical_thickness: generic/file
    # type=file: A thickness map defined in the segmented gray matter.
    # type=file|default=<undefined>: Filename for the cortical thickness.
    warped_white_matter: generic/file
    # type=file: A warped white matter image.
    # type=file|default=<undefined>: Filename for the warped white matter file.
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension:
    # type=enum|default=3|allowed[2,3]: image dimension (2 or 3)
    segmentation_image:
    # type=file|default=<undefined>: A segmentation image must be supplied labeling the gray and white matters. Default values = 2 and 3, respectively.
    gray_matter_label:
    # type=int|default=2: The label value for the gray matter label in the segmentation_image.
    white_matter_label:
    # type=int|default=3: The label value for the white matter label in the segmentation_image.
    gray_matter_prob_image:
    # type=file|default=<undefined>: In addition to the segmentation image, a gray matter probability image can be used. If no such image is supplied, one is created using the segmentation image and a variance of 1.0 mm.
    white_matter_prob_image:
    # type=file|default=<undefined>: In addition to the segmentation image, a white matter probability image can be used. If no such image is supplied, one is created using the segmentation image and a variance of 1.0 mm.
    convergence:
    # type=str|default='[50,0.001,10]': Convergence is determined by fitting a line to the normalized energy profile of the last N iterations (where N is specified by the window size) and determining the slope which is then compared with the convergence threshold.
    thickness_prior_estimate:
    # type=float|default=10: Provides a prior constraint on the final thickness measurement in mm.
    thickness_prior_image:
    # type=file|default=<undefined>: An image containing spatially varying prior thickness values.
    gradient_step:
    # type=float|default=0.025: Gradient step size for the optimization.
    smoothing_variance:
    # type=float|default=1.0: Defines the Gaussian smoothing of the hit and total images.
    smoothing_velocity_field:
    # type=float|default=1.5: Defines the Gaussian smoothing of the velocity field (default = 1.5). If the b-spline smoothing option is chosen, then this defines the isotropic mesh spacing for the smoothing spline (default = 15).
    use_bspline_smoothing:
    # type=bool|default=False: Sets the option for B-spline smoothing of the velocity field.
    number_integration_points:
    # type=int|default=10: Number of compositions of the diffeomorphism per iteration.
    max_invert_displacement_field_iters:
    # type=int|default=20: Maximum number of iterations for estimating the invertdisplacement field.
    cortical_thickness:
    # type=file: A thickness map defined in the segmented gray matter.
    # type=file|default=<undefined>: Filename for the cortical thickness.
    warped_white_matter:
    # type=file: A warped white matter image.
    # type=file|default=<undefined>: Filename for the warped white matter file.
    num_threads:
    # type=int|default=1: Number of ITK threads to use
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension: '3'
    # type=enum|default=3|allowed[2,3]: image dimension (2 or 3)
    segmentation_image:
    # type=file|default=<undefined>: A segmentation image must be supplied labeling the gray and white matters. Default values = 2 and 3, respectively.
    convergence: '"[45,0.0,10]"'
    # type=str|default='[50,0.001,10]': Convergence is determined by fitting a line to the normalized energy profile of the last N iterations (where N is specified by the window size) and determining the slope which is then compared with the convergence threshold.
    thickness_prior_estimate: '10'
    # type=float|default=10: Provides a prior constraint on the final thickness measurement in mm.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: KellyKapowski --convergence "[45,0.0,10]" --output "[segmentation0_cortical_thickness.nii.gz,segmentation0_warped_white_matter.nii.gz]" --image-dimensionality 3 --gradient-step 0.025000 --maximum-number-of-invert-displacement-field-iterations 20 --number-of-integration-points 10 --segmentation-image "[segmentation0.nii.gz,2,3]" --smoothing-variance 1.000000 --smoothing-velocity-field-parameter 1.500000 --thickness-prior-estimate 10.000000
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    dimension: '3'
    # type=enum|default=3|allowed[2,3]: image dimension (2 or 3)
    segmentation_image:
    # type=file|default=<undefined>: A segmentation image must be supplied labeling the gray and white matters. Default values = 2 and 3, respectively.
    convergence: '"[45,0.0,10]"'
    # type=str|default='[50,0.001,10]': Convergence is determined by fitting a line to the normalized energy profile of the last N iterations (where N is specified by the window size) and determining the slope which is then compared with the convergence threshold.
    thickness_prior_estimate: '10'
    # type=float|default=10: Provides a prior constraint on the final thickness measurement in mm.
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
