# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.ants.legacy.antsIntroduction' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# Uses ANTS to generate matrices to warp data from one space to another.
# 
#     Examples
#     --------
# 
#     >>> from nipype.interfaces.ants.legacy import antsIntroduction
#     >>> warp = antsIntroduction()
#     >>> warp.inputs.reference_image = 'Template_6.nii'
#     >>> warp.inputs.input_image = 'structural.nii'
#     >>> warp.inputs.max_iterations = [30,90,20]
#     >>> warp.cmdline
#     'antsIntroduction.sh -d 3 -i structural.nii -m 30x90x20 -o ants_ -r Template_6.nii -t GR'
# 
#     
task_name: antsIntroduction
nipype_name: antsIntroduction
nipype_module: nipype.interfaces.ants.legacy
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_image: medimage/nifti1
    # type=file|default=<undefined>: input image to warp to template
    reference_image: medimage/nifti1
    # type=file|default=<undefined>: template file to warp to
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    affine_transformation: generic/file
    # type=file: affine (prefix_Affine.txt)
    input_file: generic/file
    # type=file: input image (prefix_repaired.nii)
    inverse_warp_field: generic/file
    # type=file: inverse warp field (prefix_InverseWarp.nii)
    output_file: generic/file
    # type=file: output image (prefix_deformed.nii)
    warp_field: generic/file
    # type=file: warp field (prefix_Warp.nii)
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension:
    # type=enum|default=3|allowed[2,3]: image dimension (2 or 3)
    reference_image:
    # type=file|default=<undefined>: template file to warp to
    input_image:
    # type=file|default=<undefined>: input image to warp to template
    force_proceed:
    # type=bool|default=False: force script to proceed even if headers may be incompatible
    inverse_warp_template_labels:
    # type=bool|default=False: Applies inverse warp to the template labels to estimate label positions in target space (use for template-based segmentation)
    max_iterations:
    # type=list|default=[]: maximum number of iterations (must be list of integers in the form [J,K,L...]: J = coarsest resolution iterations, K = middle resolution iterations, L = fine resolution iterations
    bias_field_correction:
    # type=bool|default=False: Applies bias field correction to moving image
    similarity_metric:
    # type=enum|default='PR'|allowed['CC','MI','MSQ','PR']: Type of similartiy metric used for registration (CC = cross correlation, MI = mutual information, PR = probability mapping, MSQ = mean square difference)
    transformation_model:
    # type=enum|default='GR'|allowed['DD','EL','EX','GR','RA','RI','S2','SY']: Type of transofmration model used for registration (EL = elastic transformation model, SY = SyN with time, arbitrary number of time points, S2 =  SyN with time optimized for 2 time points, GR = greedy SyN, EX = exponential, DD = diffeomorphic demons style exponential mapping, RI = purely rigid, RA = affine rigid
    out_prefix:
    # type=str|default='ants_': Prefix that is prepended to all output files (default = ants_)
    quality_check:
    # type=bool|default=False: Perform a quality check of the result
    num_threads:
    # type=int|default=1: Number of ITK threads to use
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    reference_image:
    # type=file|default=<undefined>: template file to warp to
    input_image:
    # type=file|default=<undefined>: input image to warp to template
    max_iterations: '[30,90,20]'
    # type=list|default=[]: maximum number of iterations (must be list of integers in the form [J,K,L...]: J = coarsest resolution iterations, K = middle resolution iterations, L = fine resolution iterations
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: antsIntroduction.sh -d 3 -i structural.nii -m 30x90x20 -o ants_ -r Template_6.nii -t GR
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    reference_image:
    # type=file|default=<undefined>: template file to warp to
    input_image:
    # type=file|default=<undefined>: input image to warp to template
    max_iterations: '[30,90,20]'
    # type=list|default=[]: maximum number of iterations (must be list of integers in the form [J,K,L...]: J = coarsest resolution iterations, K = middle resolution iterations, L = fine resolution iterations
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
