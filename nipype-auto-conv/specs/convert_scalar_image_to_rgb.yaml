# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.ants.visualization.ConvertScalarImageToRGB' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Docs
# ----
# 
#     Convert scalar images to RGB.
# 
#     Examples
#     --------
#     >>> from nipype.interfaces.ants.visualization import ConvertScalarImageToRGB
#     >>> converter = ConvertScalarImageToRGB()
#     >>> converter.inputs.dimension = 3
#     >>> converter.inputs.input_image = 'T1.nii.gz'
#     >>> converter.inputs.colormap = 'jet'
#     >>> converter.inputs.minimum_input = 0
#     >>> converter.inputs.maximum_input = 6
#     >>> converter.cmdline
#     'ConvertScalarImageToRGB 3 T1.nii.gz rgb.nii.gz none jet none 0 6 0 255'
# 
#     
task_name: ConvertScalarImageToRGB
nipype_name: ConvertScalarImageToRGB
nipype_module: nipype.interfaces.ants.visualization
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    input_image: medimage/nifti-gz
    # type=file|default=<undefined>: Main input is a 3-D grayscale image.
  callable_defaults:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set as the `default` method of input fields
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    output_image: generic/file
    # type=file: converted RGB image
    # type=str|default='rgb.nii.gz': rgb output image
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension:
    # type=enum|default=3|allowed[2,3]: image dimension (2 or 3)
    input_image:
    # type=file|default=<undefined>: Main input is a 3-D grayscale image.
    output_image:
    # type=file: converted RGB image
    # type=str|default='rgb.nii.gz': rgb output image
    mask_image:
    # type=traitcompound|default='none': mask image
    colormap:
    # type=enum|default='grey'|allowed['autumn','blue','cool','copper','custom','green','grey','hot','hsv','jet','overunder','red','spring','summer','winter']: Select a colormap
    custom_color_map_file:
    # type=str|default='none': custom color map file
    minimum_input:
    # type=int|default=0: minimum input
    maximum_input:
    # type=int|default=0: maximum input
    minimum_RGB_output:
    # type=int|default=0: 
    maximum_RGB_output:
    # type=int|default=255: 
    num_threads:
    # type=int|default=1: Number of ITK threads to use
    args:
    # type=str|default='': Additional parameters to the command
    environ:
    # type=dict|default={}: Environment variables
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    dimension: '3'
    # type=enum|default=3|allowed[2,3]: image dimension (2 or 3)
    input_image:
    # type=file|default=<undefined>: Main input is a 3-D grayscale image.
    colormap: '"jet"'
    # type=enum|default='grey'|allowed['autumn','blue','cool','copper','custom','green','grey','hot','hsv','jet','overunder','red','spring','summer','winter']: Select a colormap
    minimum_input: '0'
    # type=int|default=0: minimum input
    maximum_input: '6'
    # type=int|default=0: maximum input
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: ConvertScalarImageToRGB 3 T1.nii.gz rgb.nii.gz none jet none 0 6 0 255
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    dimension: '3'
    # type=enum|default=3|allowed[2,3]: image dimension (2 or 3)
    input_image:
    # type=file|default=<undefined>: Main input is a 3-D grayscale image.
    colormap: '"jet"'
    # type=enum|default='grey'|allowed['autumn','blue','cool','copper','custom','green','grey','hot','hsv','jet','overunder','red','spring','summer','winter']: Select a colormap
    minimum_input: '0'
    # type=int|default=0: minimum input
    maximum_input: '6'
    # type=int|default=0: maximum input
  imports:
  # list[nipype2pydra.task.base.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive:
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
